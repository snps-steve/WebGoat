# Complete ADO pipeline: Build WebGoat, then run Black Duck SCA and Coverity via Bridge
# Self-hosted agent expected (Ubuntu). Requires Java, Maven (or mvnw), Docker.
# Secrets expected as pipeline vars or variable group:
#   BD_URL, BD_TOKEN
#   COV_URL (e.g., https://coverity.mycorp.local:8443), COV_USER, COV_PASSPHRASE

trigger:
- main

pool:
  name: "Self-Hosted ADO Agent"

# -----------------------------
# Variables (override at queue time if you like)
# -----------------------------
variables:
- name: tag
  value: '$(Build.BuildId)'
- name: PROJECT_NAME
  value: 'WebGoat-Azure'
- name: PROJECT_VERSION
  value: '$(Build.SourceBranchName)-$(Build.BuildId)'
- name: COVERITY_PROJECT_NAME
  value: '$(Build.Repository.Name)'
- name: COVERITY_STREAM_NAME
  value: '$(Build.SourceBranchName)'
# Set to 'true' to skip UI tests instead of installing browser deps.
- name: SKIP_UI_TESTS
  value: 'false'

stages:

# =====================
# 1) Build from source
# =====================
- stage: Build
  displayName: "Build WebGoat + image"
  jobs:
  - job: Build
    displayName: "Build"
    steps:
    - script: |
        echo "== Env sanity =="
        whoami
        id
        docker version || true
        java -version || true
      displayName: "Env + Docker + JDK sanity"

    # Install Playwright's required system libraries on Ubuntu directly via apt.
    # If the agent user doesn't have passwordless sudo, flip SKIP_UI_TESTS=true so the build continues.
    - bash: |
        set -euo pipefail
        if [ "$(echo "${SKIP_UI_TESTS}")" = "true" ]; then
          echo "SKIP_UI_TESTS=true; skipping Playwright dependency install."
          exit 0
        fi

        if ! command -v apt-get >/dev/null 2>&1; then
          echo "apt-get not found; cannot install Playwright deps; skipping UI tests."
          echo "##vso[task.setvariable variable=SKIP_UI_TESTS]true"
          exit 0
        fi

        if ! sudo -n true 2>/dev/null; then
          echo "No passwordless sudo; cannot install Playwright deps; skipping UI tests."
          echo "##vso[task.setvariable variable=SKIP_UI_TESTS]true"
          exit 0
        fi

        echo "Installing Playwright system libraries..."
        sudo -n apt-get update
        # Try generic GTK3 first, fall back to the 24.04 't64' package name.
        sudo -n apt-get install -y --no-install-recommends libgtk-3-0 || \
        sudo -n apt-get install -y --no-install-recommends libgtk-3-0t64

        # Common Playwright runtime deps
        sudo -n apt-get install -y --no-install-recommends \
          libnss3 libnspr4 libx11-6 libx11-xcb1 libxcb1 libxext6 libxcomposite1 \
          libxdamage1 libxfixes3 libxrandr2 libgbm1 libdrm2 libasound2 libcups2 \
          libatk-bridge2.0-0 libatspi2.0-0 libpangocairo-1.0-0 libpango-1.0-0 \
          libcairo2 libxshmfence1 libxkbcommon0 fonts-liberation libcurl4 ca-certificates
        echo "Playwright system libraries installed."
      displayName: "Install Playwright system libraries (Ubuntu)"
      condition: and(succeeded(), ne(variables['SKIP_UI_TESTS'], 'true'))

    # Build with or without tests depending on SKIP_UI_TESTS
    - script: |
        chmod +x ./mvnw
        ./mvnw -v
        ./mvnw -B clean install
      displayName: "Build WebGoat with mvnw (tests enabled)"
      condition: ne(variables['SKIP_UI_TESTS'], 'true')

    - script: |
        chmod +x ./mvnw
        ./mvnw -v
        ./mvnw -B -DskipTests clean install
      displayName: "Build WebGoat with mvnw (skip tests)"
      condition: eq(variables['SKIP_UI_TESTS'], 'true')

    - task: Docker@2
      displayName: "Build Docker image"
      inputs:
        command: build
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        repository: 'webgoat/webgoat'
        tags: |
          $(tag)

# =========================
# 2) Security scans (Bridge)
# =========================
- stage: Security
  displayName: "Security Scans"
  dependsOn: Build
  jobs:

  # ---- Black Duck SCA (Bridge) ----
  - job: BlackDuckSCA
    displayName: "Black Duck SCA (Bridge)"
    steps:
      - script: |
          java -version || true
          ./mvnw -v
        displayName: "JDK sanity"

      # Branch/CI build (not a PR): scan + SARIF, no PR features
      - task: BlackDuckSecurityScan@2
        displayName: "Black Duck SCA Scan (non-PR)"
        condition: ne(variables['Build.Reason'], 'PullRequest')
        env:
          DETECT_PROJECT_NAME: $(PROJECT_NAME)
          DETECT_PROJECT_VERSION_NAME: $(PROJECT_VERSION)
          DETECT_SELF_UPDATE_DISABLED: "true"
        inputs:
          blackducksca_url: $(BD_URL)
          blackducksca_token: $(BD_TOKEN)
          blackducksca_scan_failure_severities: 'BLOCKER'
          blackducksca_reports_sarif_create: true
          mark_build_status: 'SucceededWithIssues'

      # PR build: enable PR comments + Fix PR (requires azure_token)
      - task: BlackDuckSecurityScan@2
        displayName: "Black Duck SCA Scan (PR: comments + Fix PR)"
        condition: eq(variables['Build.Reason'], 'PullRequest')
        env:
          DETECT_PROJECT_NAME: $(PROJECT_NAME)
          DETECT_PROJECT_VERSION_NAME: $(PROJECT_VERSION)
          DETECT_SELF_UPDATE_DISABLED: "true"
        inputs:
          blackducksca_url: $(BD_URL)
          blackducksca_token: $(BD_TOKEN)
          blackducksca_scan_failure_severities: 'BLOCKER'
          blackducksca_reports_sarif_create: true
          blackducksca_prcomment_enabled: true
          blackducksca_fixpr_enabled: true
          azure_token: $(System.AccessToken)
          mark_build_status: 'SucceededWithIssues'

  # ---- Coverity (Bridge local analysis; no toolslist) ----
  - job: Coverity
    displayName: "Coverity (Bridge)"
    steps:
      - script: |
          java -version || true
          ./mvnw -v
        displayName: "JDK sanity"

      # Sanitize names
      - bash: |
          set -euo pipefail
          PROJ_RAW='$(COVERITY_PROJECT_NAME)'
          STRM_RAW='$(COVERITY_STREAM_NAME)'
          sanitize () { echo "$1" | tr '/ ' '--' | sed -E 's/[^A-Za-z0-9._-]/-/g' | cut -c1-200; }
          PROJ_CLEAN="$(sanitize "$PROJ_RAW")"
          STRM_CLEAN="$(sanitize "$STRM_RAW")"
          echo "Coverity Project (raw -> clean): $PROJ_RAW -> $PROJ_CLEAN"
          echo "Coverity Stream  (raw -> clean): $STRM_RAW -> $STRM_CLEAN"
          echo "##vso[task.setvariable variable=COVERITY_PROJECT_NAME]$PROJ_CLEAN"
          echo "##vso[task.setvariable variable=COVERITY_STREAM_NAME]$STRM_CLEAN"
        displayName: "Sanitize Coverity project/stream names"

      # Ensure /home/ubuntu/cov-platform exists and is writable by the agent user
      - bash: |
          set -euo pipefail
          INST_DIR="/home/ubuntu/cov-platform"
          echo "Preparing Coverity install directory at: ${INST_DIR}"
          if command -v sudo >/dev/null 2>&1; then
            sudo -n mkdir -p "${INST_DIR}" || mkdir -p "${INST_DIR}"
            sudo -n chown -R "$(id -u):$(id -g)" "${INST_DIR}" || true
          else
            mkdir -p "${INST_DIR}"
          fi
          ls -ld "${INST_DIR}"
        displayName: "Prepare Coverity install dir"

      # Branch/CI build (not a PR): Coverity scan without PR comments
      - task: BlackDuckSecurityScan@2
        displayName: "Coverity Scan (non-PR, local analysis)"
        condition: ne(variables['Build.Reason'], 'PullRequest')
        env:
          COVERITY_PROJECT_NAME: $(COVERITY_PROJECT_NAME)
          COVERITY_STREAM_NAME:  $(COVERITY_STREAM_NAME)
        inputs:
          coverity_url: $(COV_URL)
          coverity_user: $(COV_USER)
          coverity_passphrase: $(COV_PASSPHRASE)
          coverity_local: true
          coverity_install_directory: /home/ubuntu/cov-platform
          mark_build_status: 'SucceededWithIssues'

      # PR build: enable PR comments (requires azure_token)
      - task: BlackDuckSecurityScan@2
        displayName: "Coverity Scan (PR: comments, local analysis)"
        condition: eq(variables['Build.Reason'], 'PullRequest')
        env:
          COVERITY_PROJECT_NAME: $(COVERITY_PROJECT_NAME)
          COVERITY_STREAM_NAME:  $(COVERITY_STREAM_NAME)
        inputs:
          coverity_url: $(COV_URL)
          coverity_user: $(COV_USER)
          coverity_passphrase: $(COV_PASSPHRASE)
          coverity_local: true
          coverity_install_directory: /home/ubuntu/cov-platform
          coverity_prcomment_enabled: true
          azure_token: $(System.AccessToken)
          mark_build_status: 'SucceededWithIssues'
