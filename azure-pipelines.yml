# Complete ADO pipeline: Build WebGoat, then run Black Duck SCA and Coverity via Bridge
# Self-hosted agent expected (Ubuntu). Requires Java, Maven, Docker.
# Secrets expected as pipeline vars or variable group:
#   BD_URL, BD_TOKEN
#   COV_URL (e.g., https://coverity.mycorp.local:8443), COV_USER, COV_PASSPHRASE

trigger:
- main

pool:
  name: "Self-Hosted ADO Agent"

# -----------------------------
# Variables (override at queue time if you like)
# -----------------------------
variables:
- name: tag
  value: '$(Build.BuildId)'
- name: PROJECT_NAME
  value: 'WebGoat-Azure'
- name: PROJECT_VERSION
  value: '$(Build.SourceBranchName)-$(Build.BuildId)'
- name: COVERITY_PROJECT_NAME
  value: '$(Build.Repository.Name)'
- name: COVERITY_STREAM_NAME
  value: '$(Build.SourceBranchName)'
# Set to 'true' if you prefer skipping UI tests instead of installing system deps.
- name: SKIP_UI_TESTS
  value: 'false'

stages:

# =====================
# 1) Build from source
# =====================
- stage: Build
  displayName: "Build WebGoat + image"
  jobs:
  - job: Build
    displayName: "Build"
    steps:
    - script: |
        echo "== Env sanity =="
        whoami
        id
        docker version || true
        java -version || true
      displayName: "Env + Docker + JDK sanity"

    # Install Playwright browser deps on Ubuntu (only if NOT skipping UI tests)
    - bash: |
        set -euo pipefail
        if command -v apt-get >/dev/null 2>&1; then
          echo "Installing Playwright host dependencies via CLI..."
          # Prefer passwordless sudo on the agent; if not present this will fail fast.
          sudo -n mvn -q exec:java \
            -Dexec.mainClass=com.microsoft.playwright.CLI \
            -Dexec.args="install-deps"
          echo "Playwright host dependencies installed."
        else
          echo "apt-get not found; skipping Playwright deps install."
        fi
      displayName: "Install Playwright browser deps (Linux)"
      condition: and(succeeded(), ne(variables['SKIP_UI_TESTS'], 'true'))

    # Build with or without tests depending on SKIP_UI_TESTS
    - script: |
        chmod +x ./mvnw
        ./mvnw -v
        ./mvnw -B clean install
      displayName: "Build WebGoat with mvnw (tests enabled)"
      condition: ne(variables['SKIP_UI_TESTS'], 'true')

    - script: |
        chmod +x ./mvnw
        ./mvnw -v
        ./mvnw -B -DskipTests clean install
      displayName: "Build WebGoat with mvnw (skip tests)"
      condition: eq(variables['SKIP_UI_TESTS'], 'true')

    - task: Docker@2
      displayName: "Build Docker image"
      inputs:
        command: build
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        repository: 'webgoat/webgoat'
        tags: |
          $(tag)

# =========================
# 2) Security scans (Bridge)
# =========================
- stage: Security
  displayName: "Security Scans"
  dependsOn: Build
  jobs:

  # ---- Black Duck SCA (Bridge) ----
  - job: BlackDuckSCA
    displayName: "Black Duck SCA (Bridge)"
    steps:
      - script: |
          java -version || true
          ./mvnw -v
        displayName: "JDK sanity"

      # Branch/CI build (not a PR): scan + SARIF, no PR features
      - task: BlackDuckSecurityScan@2
        displayName: "Black Duck SCA Scan (non-PR)"
        condition: ne(variables['Build.Reason'], 'PullRequest')
        env:
          DETECT_PROJECT_NAME: $(PROJECT_NAME)
          DETECT_PROJECT_VERSION_NAME: $(PROJECT_VERSION)
          DETECT_SELF_UPDATE_DISABLED: "true"
        inputs:
          blackducksca_url: $(BD_URL)
          blackducksca_token: $(BD_TOKEN)
          blackducksca_scan_failure_severities: 'BLOCKER'
          blackducksca_reports_sarif_create: true
          mark_build_status: 'SucceededWithIssues'
          # network_ssl_trust_all: true  # temporary only; prefer installing CA

      # PR build: enable PR comments + Fix PR (requires azure_token)
      - task: BlackDuckSecurityScan@2
        displayName: "Black Duck SCA Scan (PR: comments + Fix PR)"
        condition: eq(variables['Build.Reason'], 'PullRequest')
        env:
          DETECT_PROJECT_NAME: $(PROJECT_NAME)
          DETECT_PROJECT_VERSION_NAME: $(PROJECT_VERSION)
          DETECT_SELF_UPDATE_DISABLED: "true"
        inputs:
          blackducksca_url: $(BD_URL)
          blackducksca_token: $(BD_TOKEN)
          blackducksca_scan_failure_severities: 'BLOCKER'
          blackducksca_reports_sarif_create: true
          blackducksca_prcomment_enabled: true
          blackducksca_fixpr_enabled: true
          azure_token: $(System.AccessToken)
          mark_build_status: 'SucceededWithIssues'
          # network_ssl_trust_all: true

  # ---- Coverity (Bridge local analysis; no toolslist) ----
  - job: Coverity
    displayName: "Coverity (Bridge)"
    steps:
      - script: |
          java -version || true
          ./mvnw -v
        displayName: "JDK sanity"

      # Sanitize names
      - bash: |
          set -euo pipefail
          PROJ_RAW='$(COVERITY_PROJECT_NAME)'
          STRM_RAW='$(COVERITY_STREAM_NAME)'
          sanitize () { echo "$1" | tr '/ ' '--' | sed -E 's/[^A-Za-z0-9._-]/-/g' | cut -c1-200; }
          PROJ_CLEAN="$(sanitize "$PROJ_RAW")"
          STRM_CLEAN="$(sanitize "$STRM_RAW")"
          echo "Coverity Project (raw -> clean): $PROJ_RAW -> $PROJ_CLEAN"
          echo "Coverity Stream  (raw -> clean): $STRM_RAW -> $STRM_CLEAN"
          echo "##vso[task.setvariable variable=COVERITY_PROJECT_NAME]$PROJ_CLEAN"
          echo "##vso[task.setvariable variable=COVERITY_STREAM_NAME]$STRM_CLEAN"
        displayName: "Sanitize Coverity project/stream names"

      # Branch/CI build (not a PR): Coverity scan without PR comments
      - task: BlackDuckSecurityScan@2
        displayName: "Coverity Scan (non-PR, local analysis)"
        condition: ne(variables['Build.Reason'], 'PullRequest')
        env:
          COVERITY_PROJECT_NAME: $(COVERITY_PROJECT_NAME)
          COVERITY_STREAM_NAME:  $(COVERITY_STREAM_NAME)
        inputs:
          coverity_url: $(COV_URL)
          coverity_user: $(COV_USER)
          coverity_passphrase: $(COV_PASSPHRASE)
          coverity_local: true
          coverity_install_directory: $(Agent.TempDirectory)/cov-platform
          mark_build_status: 'SucceededWithIssues'
          # network_ssl_trust_all: true  # temporary only; prefer installing CA

      # PR build: enable PR comments (requires azure_token)
      - task: BlackDuckSecurityScan@2
        displayName: "Coverity Scan (PR: comments, local analysis)"
        condition: eq(variables['Build.Reason'], 'PullRequest')
        env:
          COVERITY_PROJECT_NAME: $(COVERITY_PROJECT_NAME)
          COVERITY_STREAM_NAME:  $(COVERITY_STREAM_NAME)
        inputs:
          coverity_url: $(COV_URL)
          coverity_user: $(COV_USER)
          coverity_passphrase: $(COV_PASSPHRASE)
          coverity_local: true
          coverity_install_directory: $(Agent.TempDirectory)/cov-platform
          coverity_prcomment_enabled: true
          azure_token: $(System.AccessToken)
          mark_build_status: 'SucceededWithIssues'
          # network_ssl_trust_all: true
