# WebGoat Build and Security Scan Pipeline using Security Scan Extension
# Performs BD SCA and BD Coverity scans using the Black Duck Security Scan Extension

trigger:
- main
- develop

pool:
  vmImage: ubuntu-latest

variables:
  # Replace with your actual variable group names
  - group: blackduck-sca-variables
  - group: coverity-variables
  # Conditional variable for Coverity policy view
  - name: COVERITY_VIEW
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      value: ''
    ${{ else }}:
      value: 'Outstanding Issues'

steps:
# Install Java (WebGoat compatible version)
# Option 1: Use Java 21 (LTS and widely supported)
- task: JavaToolInstaller@0
  displayName: 'Install JDK 21'
  inputs:
    versionSpec: 21
    jdkArchitectureOption: x64
    jdkSourceOption: PreInstalled

# Option 2: Alternative - Install Java 23 from JDK source (uncomment if Java 21 doesn't work)
# - task: JavaToolInstaller@0
#   displayName: 'Install JDK 23 from JDK source'
#   inputs:
#     versionSpec: 23
#     jdkArchitectureOption: x64
#     jdkSourceOption: JDKFromURL
#     jdkFile: 'https://download.oracle.com/java/23/latest/jdk-23_linux-x64_bin.tar.gz'

# Build WebGoat from source
- script: |
    set -ex
    echo "Building WebGoat from source..."
    chmod +x ./mvnw
    ./mvnw clean install -DskipTests
  displayName: 'Build WebGoat'

# Black Duck SCA Scan using Security Scan Extension
- task: BlackDuckSecurityScan@2
  displayName: 'Black Duck SCA Scan'
  env:
    DETECT_PROJECT_NAME: $(Build.Repository.Name)
  inputs:
    blackducksca_url: $(BLACKDUCK_URL)
    blackducksca_token: $(BLACKDUCK_API_TOKEN)
    blackducksca_scan_failure_severities: 'BLOCKER,CRITICAL'
    blackducksca_fixpr_enabled: true
    blackducksca_prcomment_enabled: true
    blackducksca_reports_sarif_create: true
    azure_token: $(System.AccessToken)
    mark_build_status: 'SucceededWithIssues'

# Coverity Scan using Security Scan Extension
- task: BlackDuckSecurityScan@2
  displayName: 'Coverity SAST Scan'
  inputs:
    coverity_url: $(COVERITY_URL)
    coverity_user: $(COV_USER)
    coverity_passphrase: $(COVERITY_PASSPHRASE)
    coverity_policy_view: $(COVERITY_VIEW)
    coverity_prcomment_enabled: true
    azure_token: $(System.AccessToken)
    mark_build_status: 'SucceededWithIssues'

# Archive logs for debugging (optional - enable if needed)
- task: ArchiveFiles@2
  displayName: 'Archive Security Scan Logs'
  condition: succeededOrFailed()
  enabled: false
  inputs:
    rootFolderOrFile: .bridge
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/security-scan-logs.zip'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Security Scan Logs'
  condition: succeededOrFailed()
  enabled: false
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'security-logs'